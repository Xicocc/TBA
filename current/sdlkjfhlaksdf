# def load_state(self):
#         """Load the saved state from a file."""
#         try:
#             data = json_operations.load_json_file()
#             if data:
#                 if isinstance(data, dict) and 'data' in data:
#                     loaded_data = data['data']

#                     # Load jobs_df
#                     if 'jobs_df' in loaded_data:
#                         self.jobs_df = pd.DataFrame(loaded_data['jobs_df'])
#                     else:
#                         messagebox.showerror('Error', 'Missing data (data1)')
#                         self.root.focus_force()
#                         return

#                     # Load added_jobs_df
#                     if 'added_jobs_df' in loaded_data:
#                         self.added_jobs_df = pd.DataFrame(loaded_data['added_jobs_df'])
#                         if self.added_jobs_df.empty:
#                             # Reinitialize with the correct columns if loaded DataFrame is empty
#                             self.added_jobs_df = pd.DataFrame(columns=[CONST_SACO, CONST_CLIENTE, ORI_CONST_DESC, CONST_QUANT, ORI_CONST_SECTOR, CONST_ESTADO, 'URGENCIA', CONST_DATA_ENTR])
#                     else:
#                         messagebox.showerror('Error', 'Missing data (data2)')
#                         self.root.focus_force()
#                         return

#                     # Standardize column names
#                     self.jobs_df.columns = self.jobs_df.columns.str.replace(ORI_CONST_URG, CONST_URG, regex=False)
#                     self.added_jobs_df.columns = self.added_jobs_df.columns.str.replace(ORI_CONST_URG, CONST_URG, regex=False)

#                     self.jobs_df.columns = self.jobs_df.columns.str.replace(ORI_CONST_DESC, CONST_DESC, regex=False)
#                     self.added_jobs_df.columns = self.added_jobs_df.columns.str.replace(ORI_CONST_DESC, CONST_DESC, regex=False)

#                     # Set up Treeview columns
#                     self.tree['columns'] = list(self.jobs_df.columns)
#                     for col in self.tree['columns']:
#                         if col == ORI_CONST_SECTOR:
#                             # Change the column name in treeview from 'SECTOR EM QUE EST√Å' to 'SECTOR' for consistency
#                             self.tree.heading(col, text='SECTOR')
#                             self.tree.column(col, anchor="w")
#                         else:
#                             self.tree.heading(col, text=col)
#                             self.tree.column(col, anchor="w")

#                     self.initial_button_frame.pack_forget()
#                     self.warning_frame.pack_forget()
#                     self.file_help_button.pack_forget()
#                     messagebox.showinfo('Success', 'Data restored successfully')
#                     self.refresh_view()
#                     self.root.focus_force()
#                     self.is_loaded_data = True
#                     self.enable_buttons()
#                 else:
#                     messagebox.showerror('Error', 'Expected a dictionary with data keys')
#                     self.root.focus_force()
#             else:
#                 messagebox.showerror('Error', 'Failed to load data')
#                 self.root.focus_force()
#         except json.JSONDecodeError:
#             messagebox.showerror('Error', 'Error decoding data. The file may be corrupted.')
#             self.root.focus_force()
#         except pd.errors.EmptyDataError:
#             messagebox.showerror('Error', 'Data is empty or could not be processed.')
#             self.root.focus_force()
#         except KeyError as e:
#             messagebox.showerror('Error', f'Missing expected key: {e}')
#             self.root.focus_force()
#         except Exception as e:
#             messagebox.showerror('Error', f'Unexpected error: {e}')
#             self.root.focus_force()